
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000001b8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010c  0080010c  00000258  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000755  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000694  00000000  00000000  00000a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e8  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
{
	
	
	// Set pin as output in Data Direction Register
	
	DDRC = DDRC | (1<<LED_RED1);
  a6:	38 9a       	sbi	0x07, 0	; 7
	DDRC = DDRC | (1<<LED_RED2);
  a8:	39 9a       	sbi	0x07, 1	; 7
	DDRC = DDRC | (1<<LED_RED3);
  aa:	3a 9a       	sbi	0x07, 2	; 7
	DDRC = DDRC | (1<<LED_RED4);
  ac:	3b 9a       	sbi	0x07, 3	; 7
	DDRC = DDRC | (1<<LED_RED5);
  ae:	3c 9a       	sbi	0x07, 4	; 7
	DDRC = DDRC | (1<<LED_RED6);
  b0:	3d 9a       	sbi	0x07, 5	; 7
	

	// Set pin LOW in Data Register (LED off)
	
	PORTC = PORTC | (1<<LED_RED1);
  b2:	40 9a       	sbi	0x08, 0	; 8
	PORTC = PORTC | (1<<LED_RED2);
  b4:	41 9a       	sbi	0x08, 1	; 8
	PORTC = PORTC | (1<<LED_RED3);
  b6:	42 9a       	sbi	0x08, 2	; 8
	PORTC = PORTC | (1<<LED_RED4);
  b8:	43 9a       	sbi	0x08, 3	; 8
	PORTC = PORTC | (1<<LED_RED5);
  ba:	44 9a       	sbi	0x08, 4	; 8
	PORTC = PORTC | (1<<LED_RED6);
  bc:	45 9a       	sbi	0x08, 5	; 8
	
	/*PUSH BUTTON*/
	
	DDRD = DDRD & ~(1<<BUTTON);  // input
  be:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BUTTON); // enable internal pull up 
  c0:	58 9a       	sbi	0x0b, 0	; 11
    for (;;){
		
        // Pause several milliseconds
        _delay_ms(SHORT_DELAY);
		
		PORTC = PORTC | (1<<leds[a]);	
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	74 2f       	mov	r23, r20
  c8:	65 2f       	mov	r22, r21
			   PORTC = PORTC | (1<<leds[5]);	
			
		   }else if(a == 0){
			
			   b = 0;
			   PORTC = PORTC | (1<<leds[0]);
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	84 e3       	ldi	r24, 0x34	; 52
  d2:	9c e0       	ldi	r25, 0x0C	; 12
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x2e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x38>
  de:	00 00       	nop
    for (;;){
		
        // Pause several milliseconds
        _delay_ms(SHORT_DELAY);
		
		PORTC = PORTC | (1<<leds[a]);	
  e0:	28 b1       	in	r18, 0x08	; 8
  e2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <a>
  e6:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <a+0x1>
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e0 50       	subi	r30, 0x00	; 0
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	ca 01       	movw	r24, r20
  f4:	00 80       	ld	r0, Z
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x56>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <main+0x52>
 100:	82 2b       	or	r24, r18
 102:	88 b9       	out	0x08, r24	; 8
		
		if(bit_is_clear(PIND,BUTTON)){ //we select the direction with this if
 104:	48 99       	sbic	0x09, 0	; 9
 106:	e3 cf       	rjmp	.-58     	; 0xce <main+0x28>
		
		   if(a == 5){	
 108:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <a>
 10c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <a+0x1>
 110:	85 30       	cpi	r24, 0x05	; 5
 112:	91 05       	cpc	r25, r1
 114:	89 f4       	brne	.+34     	; 0x138 <main+0x92>
			   
			   b = 1;
 116:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <__data_end>
 11a:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <__data_end+0x1>
			   PORTC = PORTC | (1<<leds[5]);	
 11e:	28 b1       	in	r18, 0x08	; 8
 120:	ca 01       	movw	r24, r20
 122:	1a 96       	adiw	r26, 0x0a	; 10
 124:	0c 90       	ld	r0, X
 126:	1a 97       	sbiw	r26, 0x0a	; 10
 128:	02 c0       	rjmp	.+4      	; 0x12e <main+0x88>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <main+0x84>
 132:	82 2b       	or	r24, r18
 134:	88 b9       	out	0x08, r24	; 8
 136:	10 c0       	rjmp	.+32     	; 0x158 <main+0xb2>
			
		   }else if(a == 0){
 138:	89 2b       	or	r24, r25
 13a:	71 f4       	brne	.+28     	; 0x158 <main+0xb2>
			
			   b = 0;
 13c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 140:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
			   PORTC = PORTC | (1<<leds[0]);
 144:	28 b1       	in	r18, 0x08	; 8
 146:	ca 01       	movw	r24, r20
 148:	0c 90       	ld	r0, X
 14a:	02 c0       	rjmp	.+4      	; 0x150 <main+0xaa>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <main+0xa6>
 154:	82 2b       	or	r24, r18
 156:	88 b9       	out	0x08, r24	; 8
			
		   } // we rest one to a unless if b is 0 that we add one
		
		   if(b == 0){
 158:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 15c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 160:	89 2b       	or	r24, r25
 162:	51 f4       	brne	.+20     	; 0x178 <main+0xd2>
			
			   a++;
 164:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <a>
 168:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <a+0x1>
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <a+0x1>
 172:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <a>
 176:	09 c0       	rjmp	.+18     	; 0x18a <main+0xe4>
			
		   }else{
			
			   a--;
 178:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <a>
 17c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <a+0x1>
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <a+0x1>
 186:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <a>
			
		   }	
		
		PORTC = PORTC & ~(1<<leds[a]);	
 18a:	98 b1       	in	r25, 0x08	; 8
 18c:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <a>
 190:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <a+0x1>
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e0 50       	subi	r30, 0x00	; 0
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	9a 01       	movw	r18, r20
 19e:	00 80       	ld	r0, Z
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <main+0x100>
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <main+0xfc>
 1aa:	82 2f       	mov	r24, r18
 1ac:	80 95       	com	r24
 1ae:	89 23       	and	r24, r25
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	8d cf       	rjmp	.-230    	; 0xce <main+0x28>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
